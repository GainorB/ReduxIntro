import React, { Component } from 'react';

// glue between React and Redux
import { connect } from 'react-redux';
import { selectBook } from '../actions/index'; // import action

// use this to make sure the action generated by the Action Creator flows through the reducers
import { bindActionCreators } from 'redux';

// Redux: A collection of all the data that describes the application
    // We centralize all of the data in the app into one object (application state)

// React represents the view which translates the apps data into something a user can interact with

// a container is a react component that has a direct connection to our state managed by redux
// react redux library makes the bridge between redux and react
// containers are also called "smart components"

// how components become containers:
    // the most parent component that cares about a particular peice of state
    // App.js will usually remain a regular component even though it makes sense to make it a container
    // only the "container" component is connected to redux

class BookList extends Component {

    renderList(){
        return this.props.books.map((book) => {
            return (
                <li 
                onClick={() => this.props.selectBook(book)} 
                key={book.title} 
                className="list-group-item">
                {book.title}
                </li>
            );
        });
    }

    render() {
        return (
            <ul className="list-group col-sm-4">
                {this.renderList()}
            </ul>
        );
    }
}

// takes our application state as an argument
// this function is the glue between React and Redux
// whenever our application state changes, this container will instantly re-render
function mapStateToProps(state) {
    // whatever gets returned will show up as props inside of BookList
    // whatever is returned will be "this.props."
    return {
        // to reference this object we use this.props.books
        books: state.books
    };
}

// anything returned from this function will end up as props to the BookList container
// now we can call this.props.selectBook
function mapDispatchToProps(dispatch){
    // Whenever selectBook is called the result will be passed to all reducers
    // dispatch is a function, the 2nd parameter that makes sure the result is received and sent to all the reducers
    // selectBook is a function that returns an object
    // the purpose of bindActionCreators and dispatch is to specifically take what gets returned from selectBook and make sure it flows through all reducers
    return bindActionCreators({ selectBook }, dispatch);
}

// connect: takes this component and mapStateToProps and return a container
// connect takes a function and a component and produces a container
// a container is a compoent that is aware of the state thats contained by Redux
// whenever the application state changes the object in mapStateToProps will be assigned as props to the component

// promote BookList from a component to a container and needs to know about this new dispatch method
export default connect(mapStateToProps, mapDispatchToProps)(BookList);